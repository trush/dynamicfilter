This is the README file for the general app use and describes important developer files and subdirectories.

The simulation_files directory contains all the csv files that are outputted from simulation runs.
In addition, this directory contains csv files that are inputed into simulation runs and for the database.
There are also multiple plotScripts in this directory that output graphs to visualize the data.

First three listed files are Django necessity files:

models.py
———————————————
Contains all the models used for this project

views.py
———————————————
(Not currently in working condition)

urls.py
———————————————
(Not currently in working condition)

forms.py
———————————————
(Linked to views.py)
Contains possible forms classes to make implementation easier

data_load.py
———————————————
load_database()
	Loads data from cvs files into the database.
	Data includes questions, predicates, items, ip_pairs.
make_task_file()
	Makes a csv file used for importing to AMT batches based on data in the database.

views_helpers.py
———————————————
Contains helper functions for both test_simulations.py and views.py
The core of algorithm is contained within this file.
A toggling option between the provided algorithms and other features are located at the top of the file.

pending_eddy()
	This is the function that runs a chosen system and output the chosen
	ip_pair
lotteryPendingQueue()
	This is the current lottery that is run by our main algorithm
updateCounts()
	Updates the statistics on items, predicates, and ip_pairs based on the vote 	casted

Further documentation on each function is inside the file.

synthesized_data.py
———————————————
Generates synthetic data (instead of real data) for the simulations.
The user can control the selectivity and cost of predicates within this file.

test_simulations.py
———————————————
This is the file that runs simulations. To run simulations, enter this into the command line:
./manage.py test dynamicfilterapp.test_simulations

Use CHOSEN_PREDS to chose which predicates to test, NUM_WORKERS to control the number of workers in the simulation, and NUM_SIM to control how many simulations are run.

In general, there are two options - to run simulations on real data from csv files pulled off of AMT
or to use synthetic data generated by synthesized_data.py
Inside test_simulation(), there are commented areas that one can toggle between using real and synthesized data.

The following functions that are listed are the core of the testing structure. There are other helper functions and functions that output statistics to csv files.

load_data()
	Loads in questions, predicates, items, and ip_pairs from csv files into the test database
	Returns a dictionary generated by get_sample_answer_dict()
get_sample_answer_dict()
	Makes a dictionary based on the batch file on worker responses pulled from AMT
run_sim()
	Runs a single simulation on real data
syn_run_sim()
	Runs a single simulation on synthetic data
test_simulation()
	This is the main test function. It runs simulations NUM_SIM amount of times and resets the database each run.

