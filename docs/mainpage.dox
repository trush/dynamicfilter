/*! \mainpage Dynamic Filter App - Project Overview
\tableofcontents
\section intro Introduction
The Dynamic Filter works at the intersection of human computing and query processing, to make filtering a database using Amazon's Mechanical Turk (AMT) more efficient. The Dynamic Filter uses an adaptive approach to address the problem of not knowing filter selectivity and cost \a a \a priori, without seeking to directly estimate either metric. The approach is strongly based on the algorithm described in the paper "Eddies: Continuously Adaptive Query Processing" by Avnur and Hellerstein.

\section gettingstarted Getting Started
To get the codebase set up, check out the \ref install_info "Installation Guide"

\section defs Definitions
- \b Amazon's \b Mechanical \b Turk: A service provided by Amazon, where workers can use the site to complete Human Intelligence Tasks (HITs) posted by developers/researchers like us.
- \b Human \b Intelligence \b Task \b (HIT): A task issued on AMT to a worker/workers. Typical HITs include identifying what kinds of things are in a photo or transcribing a short audio clip. Workers are compensated with a small monetary reward (money or Amazon store credit).
- \b item: An entity or object in the database that we are attempting to query. These have qualities that will make them pass or fail predicates.
- \b predicate: A condition or quality that items in the database may or may not satisfy. (e.g. for hotel items, "Has a gym" or "Costs less than $80 per night")
- \b IP \b pair: An item-predicate pair. The combination of an item with some predicate, which will either be "true," meaning that the item satisfies the predicate, or "false," meaning the item does not. IP pairs are the content of tasks issued to workers.
- \b task: A Human Intelligence Task (HIT) posted on AMT.
- \b selectivity: The likelihood that a predicate is false for items in the database. Defined (for our purposes) as the ratio of items that fail the predicate to the number of items overall. Thus, high selectivity means that a predicate passes very few items.
- \b ambiguity: The difficulty of getting consensus about whether items satisfy a given predicate. The more worker votes that are required to reach a convincing consensus about whether an item satisfies a predicate, the more ambiguous it is.
- \b cost: A metric of predicates that considers both the number of tasks they tend to require to pass or fail an item (i.e. ambiguity) and \a also the amount of clock time required for workers to return a response for an IP pair for that predicate.

\section consensus Aggregating Worker Votes & Evaluating Consensus
Our consensus metric is complicated. For each IP pair chosen, we do the following:
  - We gather (\link dynamicfilterapp.toggles.NUM_CERTAIN_VOTES NUM_CERTAIN_VOTES\endlink) votes on the chosen IP pair
  - To take "consensus" we generate a beta distribution from the number of (y/n) votes
  - Then integrate over it from zero to (\link dynamicfilterapp.toggles.DECISION_THRESHOLD DECISION_THRESHOLD\endlink)
  - If the probability area is less than (\link dynamicfilterapp.toggles.UNCERTAINTY_THRESHOLD UNCERTAINTY_THRESHOLD\endlink) then we have consensus
  - Else we gather more votes

This is repeated until one of several conditions is met:
  1. We reach consensus (naturally)
  2. The total number of gathered votes is equal to (\link dynamicfilterapp.toggles.CUT_OFF CUT_OFF\endlink)
  3. The number of either (yes)s or (no)s on their own is equal to (\link dynamicfilterapp.toggles.SINGLE_VOTE_CUTOFF SINGLE_VOTE_CUTOFF\endlink)

If either condition 2 or 3 we take a simple majority vote.

\section current Current Work
Consensus-ing
Timed Simulations
windowing
MAB

\section future Future Work
Concurrency/live use/new real data sets
*/
